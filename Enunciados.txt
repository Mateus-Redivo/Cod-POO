ENUNCIADOS DE EXERCÍCIOS - PROGRAMAÇÃO ORIENTADA A OBJETOS
=========================================================

1. EXERCÍCIOS DE ENCAPSULAMENTO
-----------------------------

1.1. Conta Bancária
Implemente a classe ContaBancária com encapsulamento adequado:
- Complete a classe com todos os getters e setters necessários
- Adicione um construtor que receba número, saldo inicial e titular
- Implemente métodos depositar(double valor) e sacar(double valor)
- Garanta que o número da conta e o saldo não possam ser negativos
- Adicione um método transferir(ContaBancaria destino, double valor)

1.2. Produto
Expanda a classe Produto com os seguintes requisitos:
- Complete os getters para todos os atributos
- Implemente um setter para o nome que valide que não está vazio
- Crie um construtor que inicialize todos os atributos
- Adicione métodos para adicionar e remover do estoque
- Implemente um método calcularValorTotalEstoque() que retorne o valor total

1.3. Funcionário
Melhore a classe Funcionário:
- Implemente getters e setters para todos os atributos
- Crie um construtor adequado
- Adicione validação para que o salário base não seja negativo
- Crie um método público para definir o percentual do bônus (ex: 10%, 15%)
- Adicione um método toString() que retorne informações formatadas do funcionário

2. EXERCÍCIOS DE HERANÇA
----------------------

2.1. Sistema de Veículos
Expanda o sistema de veículos:
- Complete a classe Veiculo com construtores adequados
- Adicione atributos ano e preço à classe base
- Crie a classe Moto que também estende Veiculo
- Adicione atributos específicos para Carro (numPortas) e Moto (cilindrada)
- Implemente um método abstrato calcularIpva() na classe base que as filhas implementam

2.2. Sistema Bancário
Desenvolva o sistema bancário:
- Adicione atributos comuns (número, titular) à classe ContaBancaria
- Implemente métodos depositar() e sacar() na classe base
- Crie a classe ContaCorrente que estende ContaBancaria com taxa de manutenção
- Modifique a classe ContaPoupanca para ter um método renderJuros()
- Crie uma classe Cliente que pode ter múltiplas contas

3. EXERCÍCIOS DE SOBRECARGA E SOBRESCRITA
--------------------------------------

3.1. Calculadora com Sobrecarga
Expanda a classe Calculadora:
- Adicione novos métodos sobrecarregados para somar 3 e 4 números
- Implemente métodos multiplicar() sobrecarregados para int e double
- Crie métodos subtrair() e dividir() com sobrecarga
- Implemente um método calcularMedia() com diferentes assinaturas
- Adicione um método que aceite um array de números

3.2. Sistema de Impressão
Melhore a classe Impressora:
- Adicione métodos imprimir() para tipos boolean, double e array
- Crie um método que permita imprimir múltiplos valores de tipos diferentes
- Implemente um método para imprimir um objeto qualquer
- Adicione um método para imprimir com formatação personalizada
- Crie uma subclasse ImpressoraColorida que sobrescreva os métodos

3.3. Reino Animal
Expanda o sistema de animais:
- Adicione atributos nome, idade e espécie à classe Animal
- Crie novas subclasses: Gato, Pássaro e Peixe
- Implemente o método emitirSom() em cada subclasse
- Adicione um método abstrato mover() na classe base
- Sobrescreva toString() em cada subclasse

4. EXERCÍCIOS DE TRATAMENTO DE EXCEÇÕES
------------------------------------

4.1. Calculadora Robusta
Melhore a calculadora:
- Transforme o método dividir para lançar uma exceção personalizada DivisaoPorZeroException
- Adicione tratamento de exceções para outros métodos (raiz quadrada, logaritmo)
- Implemente uma classe CalculadoraTest que demonstre o tratamento das exceções
- Crie um método que capture múltiplas exceções de forma adequada
- Utilize finally para registrar todas as operações realizadas

4.2. Sistema de Cadastro
Expanda o sistema de pessoas:
- Crie uma classe de exceção NomeInvalidoException
- Modifique setIdade para ser mais específico na mensagem de erro
- Implemente um método cadastrar() que valide todos os dados
- Crie uma classe Cadastro que gerencie múltiplas pessoas com tratamento de exceções
- Implemente validação de CPF com exceção personalizada

4.3. Gerenciador de Arquivos
Complete o sistema de arquivos:
- Implemente o código de leitura usando FileReader e BufferedReader
- Crie um método escreverArquivo() com tratamento adequado de exceções
- Adicione um método copiarArquivo() que combine leitura e escrita
- Utilize try-with-resources para gerenciar os recursos corretamente
- Implemente um método para processar lotes de arquivos com tratamento de exceções